package task_2_18_1;

import java.util.Random;

/**
 * 1. Створіть програму, яка імітує симетричну систему шифрування, що використовує псевдовипадкову послідовність байтів (гамму).
 * Для цього створіть клас GammaCypher з методом main та двома статичними методами
 * byte[] encrypt(byte[] text, long key) та
 * byte[] decrypt(byte[] encText, long key),
 * які будуть виконувати шифрування та дешифрування, відповідно, методом гаммуваня. Методи приймають масив байтів
 * відкритого тексту byte[] text, масив байтів зашифрованого тексту byte[] encText та ключ шифрування long key.
 * 2. У методі encrypt (виконується шифрувальником) отримайте псевдовипадкову послідовність байтів (гамму) із кількістю,
 * що дорівнює кількості байтів параметра text, за допомогою java.util.Random із початковим значенням (seed), яке дорівнює
 * значенюю параметра key. Після чого виконайте шифруваня байтів відкритого тексту шляхом накладання гамми шифру(тобто виконаням
 * операції побітового XOR над кожним байтом відкритого тексту з відповідним байтом гамми шифру). Метод повинен повертати масив
 * байтів зашифрованого тексту.
 * 3. У методі encrypt decrypt (виконується дешифрувальником) також отримайте псевдовипадкову послідовність байтів (гамму) із
 * кількістю, що дорівнює кількості байтів параметра encText, за допомогою java.util.Random із початковим значенням (seed), яке
 * дорівнює значенюю параметра key (вважається, що ключ переданий від шифрувальника до дешифрувальника захищеним способом).
 * Після чого виконайте розшифруваня байтів зашифрованого тексту шляхом накладання гамми шифру(тобто виконаням операції побітового
 * XOR над кожним байтом відкритого тексту з відповідним байтом гамми шифру). Метод повинен повертати масив байтів розшифрованого тексту.
 * 4. У методі main оголосіть змінні: рядок text з довільним значенням (відкритий текст) та змінну long key з довільним значенням
 * (ключ шифрування).
 * 5. Виконайте шифрування байтів відкритого тексту з визначеним ключем шифрування методом encrypt. Виведіть у консоль послідовніть
 * байтів зашифрованого тексту.
 * 6. Виконайте розшифрування байтів зашифрованого тексту з ключем шифрування, який використовувався, методом decrypt. Виведіть
 * у консоль послідовніть байтів розшифрованого тексту та створений з них рядок розшифрованого тексту.
 * *
 * * @version 1.0
 * * @author Olha Nozdriukhina
 */

public class GammaCypher {
    public static void main(String[] args) {
        // Вхідний текст та ключ шифрування
        String text = "Це секретний текст для шифрування.";
        long key = 123456789;

        // Шифруємо текст
        byte[] encryptedText = encrypt(text.getBytes(), key);

        // Виводимо зашифрований текст у вигляді масиву байтів
        System.out.print("Зашифрований текст (в байтах): ");
        for (byte b : encryptedText) {
            System.out.print(b + " ");
        }
        System.out.println();

        // Розшифровуємо текст
        byte[] decryptedTextBytes = decrypt(encryptedText, key);
        String decryptedText = new String(decryptedTextBytes);

        // Виводимо розшифрований текст
        System.out.println("Розшифрований текст: " + decryptedText);
    }

    // Метод для шифрування тексту за допомогою гамми
    public static byte[] encrypt(byte[] text, long key) {
        Random random = new Random(key);
        byte[] gamma = new byte[text.length];

        // Генеруємо гамму
        random.nextBytes(gamma);

        // Виконуємо операцію XOR між текстом і гаммою
        byte[] encryptedText = new byte[text.length];
        for (int i = 0; i < text.length; i++) {
            encryptedText[i] = (byte) (text[i] ^ gamma[i]);
        }

        return encryptedText;
    }

    // Метод для розшифрування тексту за допомогою гамми
    public static byte[] decrypt(byte[] encText, long key) {
        Random random = new Random(key);
        byte[] gamma = new byte[encText.length];

        // Генеруємо гамму
        random.nextBytes(gamma);

        // Виконуємо операцію XOR між зашифрованим текстом і гаммою
        byte[] decryptedText = new byte[encText.length];
        for (int i = 0; i < encText.length; i++) {
            decryptedText[i] = (byte) (encText[i] ^ gamma[i]);
        }

        return decryptedText;
    }
}

